#
#This is an addon for SkRPG that allows adding statistics to items.
options:
    version: 1.0
#
#Checks if SkRPG is loaded, then register
#
on skrpg complete loading:
    if script "SkRPG/Main/!Main/SkRPG.sk" is loaded:
        skRPGLoadAddon("SkRPGItemsAddon", "SkRPG/Main/Addons/SkRPGItemsAddon.sk")
    else:
        send "&a[SkRPGItemsAddon] &cAddon not loaded ! You need to install SkRPG !" to console

#
#Commands
#
command /skrpgitemsaddon <text> <text> <integer>:
    permission: skrpgitemsaddon.admin
    usage: &b/skrpgitemsaddon help
    trigger:
        if arg 1 is "setstat":
            if tool of player is air:
                send "&a[SkRPGItemsAddon] &cYou need to hold something in your main hand !"
                stop
            else:
                set {_stat} to arg 2
                if {skrpg.config.database::*} contains {_stat}:
                    if arg 3 is set:
                        set tool of player to skRPGItemsAddonSetStat(tool of player, arg 2, arg 3)
                        send "&a[SkRPGItemsAddon] &eItem changed successfully !"  
                    else:
                        send "&a[SkRPGItemsAddon] &cYou need to set an amount !"                    
                else:
                    send "&a[SkRPGItemsAddon] &cStat &e%arg 2% &cdoes not exists !"
        if arg 1 is "removestat":
            if tool of player is air:
                send "&a[SkRPGItemsAddon] &cYou need to hold something in your main hand !"
                stop
            else:
                set {_stat} to arg 2
                if {skrpg.config.database::*} contains {_stat}:
                    if arg 3 is set:
                        set tool of player to skRPGItemsAddonRemoveStatAmount(tool of player, arg 2, arg 3)
                        send "&a[SkRPGItemsAddon] &eItem changed successfully !"  
                    else:
                        send "&a[SkRPGItemsAddon] &cYou need to set an amount !"                    
                else:
                    send "&a[SkRPGItemsAddon] &cStat &e%arg 2% &cdoes not exists !"
        if arg 1 is "applyupgrade":
            if tool of player is air:
                send "&a[SkRPGItemsAddon] &cYou need to hold something in your main hand !"
                stop
            else:
                set {_stat} to arg 2
                if {skrpg.config.database::*} contains {_stat}:
                    if arg 3 is set:
                        set tool of player to skRPGItemsAddonUpgradeStat(tool of player, arg 2, arg 3, "default")
                        send "&a[SkRPGItemsAddon] &eItem changed successfully !"  
                    else:
                        send "&a[SkRPGItemsAddon] &cYou need to set an amount !"                    
                else:
                    send "&a[SkRPGItemsAddon] &cStat &e%arg 2% &cdoes not exists !"
        if arg 1 is "removeupgrade":
            if tool of player is air:
                send "&a[SkRPGItemsAddon] &cYou need to hold something in your main hand !"
                stop
            else:
                set {_stat} to arg 2
                if {skrpg.config.database::*} contains {_stat}:
                    if arg 3 is set:
                        set tool of player to skRPGItemsAddonRemoveUpgradeAmount(tool of player, arg 2, arg 3, "default")
                        send "&a[SkRPGItemsAddon] &eItem changed successfully !"  
                    else:
                        send "&a[SkRPGItemsAddon] &cYou need to set an amount !"                    
                else:
                    send "&a[SkRPGItemsAddon] &cStat &e%arg 2% &cdoes not exists !"

on tab complete of "/skrpgitemsaddon":
    set tab completions for position 1 to "setstat" and "removestat" and "applyupgrade" and "removeupgrade"
    if tab arg-1 is "setstat" or "removestat" or "applyupgrade" or "removeupgrade":
        set tab completions for position 2 to {skrpg.config.database::*}
        if tab arg-2 is set:
            set tab completions for position 3 to 5 and 10 and 15 and 20 and 30 and 35 and 40


#
#Function to apply a stat on a item
#Returns the item
#
function skRPGItemsAddonSetStat(i: item, stat: string, amount: integer) :: item:
    if {skrpg.config.database::*} contains {_stat}:
        set int tag "tag;SKRPGITEMS-%{_stat}%" of nbt compound of {_i} to {_amount}
        set {_lore::*} to lore of {_i}
        if "%uncolored {_lore::*}%" does not contain uncolored "%{skrpg.config.database::%{_stat}%::display-name}%: ":
            if {_amount} is below 0:
                set {_text} to "&c%{_amount}%"
            else:
                set {_text} to "&a+%{_amount}%"
            add "%formatted {skrpg.config.database::%{_stat}%::display-name}%&8: %{_text}%" to {_lore::*}
            set {_i} to {_i} with lore {_lore::*}
        else:
            loop {_lore::*}:
                if uncolored {_lore::%loop-index%} contains uncolored "%{skrpg.config.database::%{_stat}%::display-name}%: ":
                    if {_amount} is below 0:
                        set {_text} to "&c%{_amount}%"
                    else:
                        set {_text} to "&a+%{_amount}%"
                    set {_lore::%loop-index%} to "%formatted {skrpg.config.database::%{_stat}%::display-name}%&8: %{_text}%"
            set {_i} to {_i} with lore {_lore::*}
        set {_i} to skRPGItemsAddonRefreshStatLineGlobal({_i}, {_stat})
    return {_i}
#
#Function to remove an amount of a stat from your item
#Returns the item
#
function skRPGItemsAddonRemoveStatAmount(i: item, stat: string, amount: integer) :: item:
    if {skrpg.config.database::*} contains {_stat}:
        set {_int} to int tag "tag;SKRPGITEMS-%{_stat}%" of nbt compound of {_i}
        if {_int} is not set:
            return {_i}
            stop
        set {_finalamount} to {_int}-{_amount}
        set int tag "tag;SKRPGITEMS-%{_stat}%" of nbt compound of {_i} to {_int}-{_amount}
        set {_lore::*} to lore of {_i}
        if "%uncolored {_lore::*}%" does not contain uncolored "%{skrpg.config.database::%{_stat}%::display-name}%: ":
            if {_finalamount} is below 0:
                set {_text} to "&c%{_finalamount}%"
            else:
                set {_text} to "&a+%{_finalamount}%"
            add "%formatted {skrpg.config.database::%{_stat}%::display-name}%&8: %{_text}%" to {_lore::*}
            set {_i} to {_i} with lore {_lore::*}
        else:
            loop {_lore::*}:
                if uncolored {_lore::%loop-index%} contains uncolored "%{skrpg.config.database::%{_stat}%::display-name}%: ":
                    if {_finalamount} is below 0:
                        set {_text} to "&c%{_finalamount}%"
                    else:
                        set {_text} to "&a+%{_finalamount}%"
                    set {_lore::%loop-index%} to "%formatted {skrpg.config.database::%{_stat}%::display-name}%&8: %{_text}%"
            set {_i} to {_i} with lore {_lore::*}
        #Update the stat amount with upgrades
        set {_source-list::*} to string list tag "tag;SKRPGITEMS-sources-list" of nbt compound of {_i}
        if {_source-list::*} is set:
            loop {_source-list::*}:
                set {_upgrade_int} to int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%loop-value%" of nbt compound of {_i}
                if {_upgrade_int} is set:
                    set int tag "tag;SKRPGITEMS-%{_stat}%" of nbt compound of {_i} to {_int}+{_upgrade_int}
        set {_i} to skRPGItemsAddonRefreshStatLineGlobal({_i}, {_stat})
    return {_i}
#
#Function to entirely remove a stat from an item
#Returns the item
#
function skRPGItemsAddonRemoveStat(i: item, stat: string) :: item:
    if {skrpg.config.database::*} contains {_stat}:
        set {_int} to int tag "tag;SKRPGITEMS-%{_stat}%" of nbt compound of {_i}
        if {_int} is not set:
            return {_i}
            stop
        #Check if there are upgrades, then remove
        set {_source-list::*} to string list tag "tag;SKRPGITEMS-sources-list" of nbt compound of {_i}
        if {_source-list::*} is set:
            loop {_source-list::*}:
                set {_i} to skRPGItemsAddonRemoveUpgrade({_i}, {_stat}, loop-value)
        delete int tag "tag;SKRPGITEMS-%{_stat}%" of nbt compound of {_i}
        set {_lore::*} to lore of {_i}
        loop {_lore::*}:
            if uncolored {_lore::%loop-index%} contains uncolored "%{skrpg.config.database::%{_stat}%::display-name}%: ":
                remove {_lore::%loop-index%} from {_lore::*}
        set {_i} to {_i} with lore {_lore::*}
    return {_i}

#
#Updates stats of player with equipment
#
on skrpg update stat:
    add helmet of event-player to {_checkitems::*}
    add chestplate of event-player to {_checkitems::*}
    add leggings of event-player to {_checkitems::*}
    add boots of event-player to {_checkitems::*}
    #Prevent having benefits from an armor piece without wearing it
    if tool of player is not any chestplate or any helmet or any leggings or any boots:
        add tool of event-player to {_checkitems::*}
    delete {_checkstat}
    loop {_checkitems::*}:
        set {_i} to loop-value
        set {_nbt} to nbt compound of {_i}
        set {_tag} to int tag "tag;SKRPGITEMS-%event-string%" of {_nbt}
        if {_tag} is set:
            add int tag "tag;SKRPGITEMS-%event-string%" of nbt compound of {_i} to {_checkstat}
    skRPGSetStatAmount(event-player, event-string, {_checkstat}, "equipment", false)

#
#Function to upgrade a stat of an item
#Display is the way to display the upgrade. Use {v} as a placeholder for the amount.
#The source represents the origin of the statistic increase. It works in the same way as storage in SkRPG.
#
function skRPGItemsAddonUpgradeStat(i: item, stat: string = "defense", amount: integer = 10, display: string = "&d[{v}]", source: string = "default") :: item:

    set {_int} to int tag "tag;SKRPGITEMS-%{_stat}%" of nbt compound of {_i}
    if {_int} is not set:
        return {_i}
        stop
    add {_amount} to {_int}
    #Save the source of the upgrade
    #But check if it alredy exists
    set {_source-amount} to int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i}
    if {_source-amount} is set:
        set int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i} to {_source-amount}+{_amount}
    else:
        set int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i} to {_amount}
    #Save the display of the upgrade
    set string tag "tag;SKRPGITEMS-%{_stat}%-upgrade-display-%{_source}%" of nbt compound of {_i} to {_display}
    #Register the source in the nbt
    set {_source-list::*} to string list tag "tag;SKRPGITEMS-sources-list" of nbt compound of {_i}
    if {_source-list::*} does not contain {_source}:
        add {_source} to {_source-list::*}
        set string list tag "tag;SKRPGITEMS-sources-list" of nbt compound of {_i} to {_source-list::*}
    return skRPGItemsAddonSetStat({_i}, {_stat}, {_int})

#
#Function to remove an amount from a specific stat of a source
#can-be-negative: If the stat can go below 0. If 'false', stat will be deleted at 0 or below
#
function skRPGItemsAddonRemoveUpgradeAmount(i: item, stat: string = "defense", amount: integer = 10, source: string = "default", can-be-negative: boolean = false) :: item:

    set {_int} to int tag "tag;SKRPGITEMS-%{_stat}%" of nbt compound of {_i}
    if {_int} is not set:
        return {_i}
        stop
    remove {_amount} from {_int}
    #Save the source of the upgrade
    #But check if it alredy exists
    set {_source-amount} to int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i}
    if {_source-amount} is set:
        if {_can-be-negative} = true:
            set int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i} to {_source-amount}-{_amount}
            return skRPGItemsAddonSetStat({_i}, {_stat}, {_int})
        else:
            if ({_source-amount}-{_amount}) <= 0:
                return skRPGItemsAddonRemoveUpgrade({_i}, {_stat}, {_source})
            else:
                set int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i} to {_source-amount}-{_amount}
                return skRPGItemsAddonSetStat({_i}, {_stat}, {_int})
    else:
        return {_i}
        stop

#
#Function to remove an upgrade from a source (it will delete it! If you want to remove an amount, use skRPGItemsAddonRemoveUpgradeAmount)
#
function skRPGItemsAddonRemoveUpgrade(i: item, stat: string = "defense", source: string = "default") :: item:

    set {_int} to int tag "tag;SKRPGITEMS-%{_stat}%" of nbt compound of {_i}
    if {_int} is not set:
        return {_i}
        stop
    set {_source-amount} to int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i}
    if {_source-amount} is set:
        #Get the amount of the upgrade
        set {_upgrade-amount} to int tag  "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i}
        remove {_upgrade-amount} from {_int}
        delete int tag  "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i}
        delete string tag "tag;SKRPGITEMS-%{_stat}%-upgrade-display-%{_source}%" of nbt compound of {_i}
        #Check if the source exists in the list
        set {_source-list::*} to string list tag "tag;SKRPGITEMS-sources-list" of nbt compound of {_i}
        if {_source-list::*} is set:
            #Remove source if its not used anymore
            set {_source_is_used} to skRPGItemsAddonIsUpgraded({_i})
            if {_source_is_used} is false:
                remove {_source} from {_source-list::*}
            #If there is not sources anymore, reset the line. Else, update it
            if {_source-list::*} is empty:
                delete string list tag "tag;SKRPGITEMS-sources-list" of nbt compound of {_i} 
            else:
                set string list tag "tag;SKRPGITEMS-sources-list" of nbt compound of {_i} to {_source-list::*}
        return skRPGItemsAddonSetStat({_i}, {_stat}, {_int})
    else:
        return {_i}
        stop
#
#Function to parse a text as an upgrade display
#Will return the display without the placeholders
#
function skRPGItemsAddonParseDisplay(i: item, stat: string, source: string) :: string:

    set {_int} to int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i}
    set {_display} to string tag "tag;SKRPGITEMS-%{_stat}%-upgrade-display-%{_source}%" of nbt compound of {_i}
    if {_int} is below 0:
        set {_statdisplay} to "-%{_int}%"
    else:
        set {_statdisplay} to "+%{_int}%"
    replace all "{v}" with "%{_statdisplay}%" in {_display}
    return {_display}

#
#Function to refresh the stat line with upgrades (With specified source)
#
function skRPGItemsAddonRefreshStatLine(i: item, stat: string, source: string) :: item:

    set {_int} to int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i}
    set {_display} to string tag "tag;SKRPGITEMS-%{_stat}%-upgrade-display-%{_source}%" of nbt compound of {_i}
    if {_int} is below 0:
        set {_statdisplay} to "-%{_int}%"
    else:
        set {_statdisplay} to "+%{_int}%"
    set {_lore::*} to lore of {_i}
    loop {_lore::*}:
        if uncolored {_lore::%loop-index%} contains uncolored "%{skrpg.config.database::%{_stat}%::display-name}%: ":
            if {_int} is set:
                set {_all-sources::*} to string list tag "tag;SKRPGITEMS-sources-list" of nbt compound of {_i}
                loop {_all-sources::*}:
                    set {_source2} to loop-value-2
                    set {_display2} to skRPGItemsAddonParseDisplay({_i}, {_stat}, {_source2})
                    {_lore::%loop-index-1%} does not contain {_display2}
                    set {_lore::%loop-index-1%} to "%formatted {_lore::%loop-index-1%}% %{_display2}%"
            else:
                set {_int} to int tag "tag;SKRPGITEMS-%{_stat}%" of nbt compound of {_i}
                if {_int} is below 0:
                    set {_text} to "&c%{_int}%"
                else:
                    set {_text} to "&a+%{_int}%"
                {_lore::%loop-index-1%} does not contain {_display2}
                set {_lore::%loop-index-1%} to "%formatted {skrpg.config.database::%{_stat}%::display-name}%&8: %{_text}%"
    set {_i} to {_i} with lore {_lore::*}
    return {_i}
#
#Function to refresh the stat line with upgrades (All sources)
#
function skRPGItemsAddonRefreshStatLineGlobal(i: item, stat: string) :: item:

    set {_all-sources::*} to string list tag "tag;SKRPGITEMS-sources-list" of nbt compound of {_i}
    loop {_all-sources::*}:
        set {_source} to loop-value
        set {_i} to skRPGItemsAddonRefreshStatLine({_i}, {_stat}, {_source})
    return {_i}
#
#Function to test if an item is upgraded
#
function skRPGItemsAddonIsUpgraded(i: item) :: boolean:

    set {_source-list::*} to string list tag "tag;SKRPGITEMS-sources-list" of nbt compound of {_i}
    if {_source-list::*} is set:
        loop {_source-list::*}:
            set {_source} to loop-value
            loop {skrpg.config.database::*}:
                set {_stat} to loop-value-2
                if int tag "tag;SKRPGITEMS-%{_stat}%-upgrade-source-%{_source}%" of nbt compound of {_i} is set:
                    return true
                    stop
        return false
    else:
        return false